#!/usr/bin/env ruby

require 'rubygems'
require 'active_support'

require 'coffee-script'
require 'haml'
require 'sass'


def recurse(path)
  Dir.entries(path).each do |filename|
    next if filename =~ /^\./
    
    if filename =~ /\.coffee$/
      File.open File.join(path, filename.gsub(/\.coffee$/, '.js')), 'w+' do |f|
        f.write CoffeeScript.compile(File.read(path))
      end
    elsif filename =~ /\.haml$/
      File.open File.join(path, filename.gsub(/\.haml$/, '.html')), 'w+' do |f|
        f.write Haml::Engine.new(File.read(path), { :filename => path }).render
      end
    elsif filename =~ /\.sass$/
      File.open File.join(path, filename.gsub(/\.sass$/, '.css')), 'w+' do |f|
        f.write Sass::Engine.new(File.read(path), { :filename => path }).render
      end
    elsif File.directory?(File.join(path, filename))
      recurse File.join(path, filename)
    end
  end
end

recurse '.'

# module Colors
#   def color(txt, code)
#     "\033[#{ code }m#{ txt }\033[0m"
#   end
#   def red(txt)
#     color txt, 31
#   end
#   def green(txt)
#     color txt, 32
#   end
#   def yellow(txt)
#     color txt, 33
#   end
# end
# include Colors
# 
# def remove(base, relative)
#   src_ext = relative.match(/\.(\w+)$/)[1]
#   dst_ext = case src_ext
#     when 'coffee': 'js'
#     when 'sass'  : 'css'
#     when 'haml'  : 'html'
#   end
#   
#   dst_file = relative.gsub(/\.(\w+)$/, ".#{dst_ext}")
#   File.delete File.join(base, dst_file)
#   puts yellow("DELETED  #{dst_file}")
# end
# 
# def success(type, relative)
#   puts green("Compiled #{type}: #{relative}")
# end
# 
# def failure(type, relative, error)
#   puts red(  "FAILED!  #{type}: #{relative} #{error}")
# end
# 
# # compile coffee
# def coffee(base, relative)
#   path = File.join(base, relative)
#   js = CoffeeScript.compile File.read(path)
#   File.open path.gsub(/\.coffee$/, '.js'), 'w+' do |f|
#     f.write js
#   end
#   success 'Coffee', relative
# rescue CoffeeScript::CompilationError => e
#   failure 'Coffee', relative, e
# end
# 
# # compile sass
# def sass(base, relative)
#   path = File.join(base, relative)
#   css = Sass::Engine.new(File.read(path), { :filename => path }).render
#   File.open path.gsub(/\.sass$/, '.css'), 'w+' do |f|
#     f.write css
#   end
#   success 'SASS', relative
# rescue Sass::SyntaxError => e
#   failure 'SASS', relative, "#{e}\n         #{e.backtrace[0]}"
# end
# 
# # compile haml
# def haml(base, relative)
#   path = File.join(base, relative)
#   html = Haml::Engine.new(File.read(path), { :filename => path }).render
#   File.open path.gsub(/\.haml$/, '.html'), 'w+' do |f|
#     f.write html
#   end
#   success 'HAML', relative
# rescue Haml::SyntaxError => e
#   failure 'HAML', relative, "#{e}\n         #{e.backtrace[0]}"
# end
# 
# 
# puts "\nWatching...\n"
# 
# monitor = FSSM::Monitor.new
# monitor.path '.' do
#   glob '**/*.coffee'
# 
#   update do |base, relative|
#     coffee base, relative
#   end
#   
#   delete do |base, relative|
#     remove base, relative
#   end
# end
#   
# monitor.path '.' do
#   glob '**/*.sass'
# 
#   update do |base, relative|
#     sass base, relative
#   end
#   
#   delete do |base, relative|
#     remove base, relative
#   end
# end
#   
# monitor.path '.' do
#   glob '**/*.haml'
# 
#   update do |base, relative|
#     haml base, relative
#   end
#   
#   delete do |base, relative|
#     remove base, relative
#   end
# end
#   
# monitor.run